"use strict";class e extends Error{constructor(e,t){super(`UtilifyException in ${e}: ${t}`),this.name="UtilifyException"}}const t=(t,r)=>{try{return t()}catch(t){return t instanceof e&&console.error(t.message),r}};module.exports=class{static isJson=r=>(r=>t(()=>{try{return"string"==typeof r&&(JSON.parse(r),!0)}catch(t){throw new e("isJson","Failed to determine if value is a valid JSON string.")}},!1))(r);static isObject=r=>(r=>t(()=>{try{return"object"==typeof r&&!Array.isArray(r)&&null!==r}catch(t){throw new e("isObject","Failed to determine if value is an object.")}},!1))(r);static isEmpty=r=>(r=>t(()=>{try{return null==r||("string"==typeof r?0===r.trim().length:Array.isArray(r)?0===r.length:"object"==typeof r&&0===Object.keys(r).length)}catch(t){throw new e("isEmpty","Failed to determine if value is empty.")}},!1))(r);static capitalize=r=>(r=>t(()=>{try{return r.charAt(0).toUpperCase()+r.slice(1)}catch(t){throw new e("capitalize","Failed to capitalize value.")}},r))(r);static toKebabCase=r=>(r=>t(()=>{try{return r.replace(/([a-z])([A-Z])/g,"$1-$2").replace(/[\s_]+/g,"-").toLowerCase()}catch(t){throw new e("toKebabCase","Failed to convert string to kebab-case.")}},""))(r);static toSnakeCase=r=>(r=>t(()=>{try{return r.replace(/([a-z])([A-Z])/g,"$1_$2").replace(/[\s-]+/g,"_").toLowerCase()}catch(t){throw new e("toSnakeCase","Failed to convert string to snake_case.")}},""))(r);static debounce=(r,a)=>((r,a=250)=>t(()=>{let e;return()=>{clearTimeout(e),e=setTimeout(()=>{r()},a)}},()=>{throw new e("debounce","Failed to debounce function.")}))(r,a)};
