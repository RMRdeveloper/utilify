"use strict";class e extends Error{constructor(e,t){super(`UtilifyException in ${e}: ${t}`),this.name="UtilifyException"}}const t={B:{divisor:1,label:"B"},KB:{divisor:1024,label:"KB"},MB:{divisor:1048576,label:"MB"},GB:{divisor:1024**3,label:"GB"},TB:{divisor:1024**4,label:"TB"}};const i=(i,n)=>{!function(i){if(!Object.keys(t).includes(i))throw new e("getFileSize",`Invalid unit '${i}': must be one of ${Object.keys(t).join(", ")}`)}(n);const r=function(t){if(t instanceof Blob||"undefined"!=typeof File&&t instanceof File)return t.size;if("undefined"!=typeof Buffer&&Buffer.isBuffer(t))return t.length;if("object"==typeof t&&null!==t&&"size"in t){const e=t.size;if("number"==typeof e&&isFinite(e)&&e>=0)return e}throw new e("getFileSize","Invalid input: expected File, Blob, Buffer, or object with valid numeric 'size' property")}(i),{divisor:s,label:o}=t[n];return`${(r/s).toFixed(2)} ${o}`};function n(...t){if(t.length<2)throw new e("flow","At least 2 functions are required");for(let i=0;i<t.length;i++)if("function"!=typeof t[i])throw new e("flow",`Argument at index ${i} is not a function`);return e=>t.reduce((e,t)=>t(e),e)}module.exports=class{static isJson=e=>(e=>{if("string"!=typeof e)return!1;try{return JSON.parse(e),!0}catch{return!1}})(e);static isObject=e=>(e=>"object"==typeof e&&!Array.isArray(e)&&null!==e)(e);static isEmpty=e=>(e=>null==e||("string"==typeof e?0===e.trim().length:Array.isArray(e)?0===e.length:"object"==typeof e&&0===Object.keys(e).length))(e);static capitalize=t=>(t=>{if("string"!=typeof t)throw new e("capitalize","Input must be a string");return t.charAt(0).toUpperCase()+t.slice(1)})(t);static toKebabCase=t=>(t=>{if("string"!=typeof t)throw new e("toKebabCase","Input must be a string");return t.replace(/([a-z])([A-Z])/g,"$1-$2").replace(/[\s_]+/g,"-").toLowerCase()})(t);static toSnakeCase=t=>(t=>{if("string"!=typeof t)throw new e("toSnakeCase","Input must be a string");return t.replace(/([a-z])([A-Z])/g,"$1_$2").replace(/[\s-]+/g,"_").toLowerCase()})(t);static trim=t=>(t=>{if("string"!=typeof t)throw new e("trim","Input must be a string");return t.trim()})(t);static getFileExtension=e=>(e=>{if(!e||"string"!=typeof e)return"";const t=e.split("?")[0].split("#")[0].split(/[/\\]/),i=t[t.length-1],n=i.lastIndexOf(".");return-1===n||0===n?"":i.substring(n+1).toLowerCase()})(e);static getFileSize=(e,t)=>i(e,t);static debounce=(t,i)=>((t,i=250)=>{if("function"!=typeof t)throw new e("debounce","First argument must be a function");if("number"!=typeof i||i<0||!isFinite(i))throw new e("debounce","Delay must be a non-negative number");let n;return(...e)=>{clearTimeout(n),n=setTimeout(()=>t(...e),i)}})(t,i);static flow=n};
