class t extends Error{constructor(t,e){super(`UtilifyException in ${t}: ${e}`),this.name="UtilifyException"}}const e=(e,r)=>{try{return e()}catch(e){return e instanceof t&&console.error(e.message),r}};function r(...e){if(e.length<2)throw new t("flow","flow requires at least 2 functions");return t=>e.reduce((t,e)=>e(t),t)}class a{static isJson=r=>(r=>e(()=>{try{return"string"==typeof r&&(JSON.parse(r),!0)}catch(e){throw new t("isJson","Failed to determine if value is a valid JSON string.")}},!1))(r);static isObject=r=>(r=>e(()=>{try{return"object"==typeof r&&!Array.isArray(r)&&null!==r}catch(e){throw new t("isObject","Failed to determine if value is an object.")}},!1))(r);static isEmpty=r=>(r=>e(()=>{try{return null==r||("string"==typeof r?0===r.trim().length:Array.isArray(r)?0===r.length:"object"==typeof r&&0===Object.keys(r).length)}catch(e){throw new t("isEmpty","Failed to determine if value is empty.")}},!1))(r);static capitalize=r=>(r=>e(()=>{try{return r.charAt(0).toUpperCase()+r.slice(1)}catch(e){throw new t("capitalize","Failed to capitalize value.")}},r))(r);static toKebabCase=r=>(r=>e(()=>{try{return r.replace(/([a-z])([A-Z])/g,"$1-$2").replace(/[\s_]+/g,"-").toLowerCase()}catch(e){throw new t("toKebabCase","Failed to convert string to kebab-case.")}},""))(r);static toSnakeCase=r=>(r=>e(()=>{try{return r.replace(/([a-z])([A-Z])/g,"$1_$2").replace(/[\s-]+/g,"_").toLowerCase()}catch(e){throw new t("toSnakeCase","Failed to convert string to snake_case.")}},""))(r);static debounce=(r,a)=>((r,a=250)=>e(()=>{let t;return()=>{clearTimeout(t),t=setTimeout(()=>{r()},a)}},()=>{throw new t("debounce","Failed to debounce function.")}))(r,a);static flow=r}export{a as default};
